{"version":3,"sources":["components/structure.js","components/app.js","index.js"],"names":["Structure","state","data","result","number","operation","mode","historyRecord","iterator","values","element","String","clickedButton","value","num","Number","isInteger","setState","arr","pop","push","calculateResult","slice","val","op","isNaN","parseFloat","className","this","style","backgroundColor","color","onClick","React","Component","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.66824439.chunk.js","sourcesContent":["import React from 'react';\r\nimport './structure.css'\r\n\r\nclass Structure extends React.Component {\r\n\r\n    state = {\r\n        data: [],\r\n        result: 0,     \r\n        number: '',\r\n        operation: '',\r\n        mode: true\r\n    };\r\n\r\n    // saving of numbers and operation in the array\r\n    historyRecord = () => {\r\n        \r\n        let result = \"\";\r\n        var iterator = this.state.data.values()\r\n        \r\n        for (let element of iterator) { \r\n            result = result + String(element) + \"  \"\r\n        } \r\n\r\n        return result\r\n    }\r\n\r\n    // all operation on clickng the button\r\n    clickedButton = (value) => {\r\n\r\n        let num = this.state.number\r\n        // if interger is inputed\r\n        if (Number.isInteger(value) || value === '.')\r\n        {\r\n            num = num + String(value)\r\n            this.setState({ number: num, operation: ''})\r\n        }\r\n\r\n        // other than interger is inputed\r\n        else\r\n        {\r\n            if (value === '+' || value === '*' || value === '-' || value === '/' || value === '%')\r\n            {\r\n                let operation = this.state.operation\r\n                if (num !== '')\r\n                {\r\n                    // if new operation is changed\r\n                    if (operation === '-' || operation === '+' || operation === '/' || operation === '*')\r\n                    {\r\n                        let arr = this.state.data\r\n                        arr.pop()\r\n                        arr.push(num)\r\n                        arr.push(operation)\r\n                        this.setState({data: arr\r\n                            , number: '', operation: value, mode: true})\r\n                    }\r\n                    else\r\n                    {\r\n                        this.setState({data: [...this.state.data, num, value]\r\n                        , number: '', operation: value, mode: true})\r\n                    }\r\n                }  \r\n                else\r\n                {\r\n                    // if new operation is changed\r\n                    if (operation === '-' || operation === '+' || operation === '/' || operation === '*')\r\n                    {\r\n                        let arr = this.state.data\r\n                        arr.pop()\r\n                        arr.push(value)\r\n                        this.setState({data: arr\r\n                            , number: '', operation: value, mode: true})\r\n                    }\r\n                    else\r\n                    {\r\n                        this.setState({data: [...this.state.data, value]\r\n                        , number: '', operation: value, mode: true})\r\n                    }\r\n                    \r\n                }\r\n               \r\n            }\r\n            \r\n            // clearing all data\r\n            else if (value === 'C')\r\n            {\r\n                this.setState({data: [], number: '', operation: '', result: 0, mode: true})\r\n            }\r\n\r\n            // on pressing equals\r\n            else if (value === '=')\r\n            {\r\n                \r\n                if (num !== '')\r\n                {\r\n                    var result = this.calculateResult(num)\r\n                    this.setState({data: [],  number: String(result), operation: '', result: result, mode: true})\r\n                                        \r\n                }\r\n              \r\n            }\r\n\r\n            // changing number of negative positive\r\n            else if (value === 'm')\r\n            {\r\n                let num = this.state.number\r\n                if (this.state.mode === true)\r\n                {\r\n                    num = '-' + num\r\n                    this.setState({number: num, mode: false})\r\n                }\r\n                else\r\n                {\r\n                    num = num.slice(1); \r\n                    this.setState({number: num, mode: true})\r\n                }\r\n                \r\n            }\r\n  \r\n        }\r\n\r\n    }\r\n\r\n    // calculating the result on pressing =\r\n    calculateResult = (num) => {\r\n\r\n        let result = 0\r\n        var val = this.state.data\r\n        val.push(num)\r\n        var iterator = val.values()\r\n        \r\n        let op = '+'\r\n        for (let element of iterator) { \r\n            \r\n            if (!isNaN(element))\r\n            {\r\n                if (op === '+')\r\n                {\r\n                    result = result + parseFloat(element);\r\n                }\r\n                else if (op === '-')\r\n                {\r\n                    result = result - parseFloat(element)\r\n                }\r\n                else if (op === '/')\r\n                {\r\n                    result = result / parseFloat(element)\r\n                }\r\n                else if (op === '*')\r\n                {\r\n                    result = result * parseFloat(element)\r\n                }\r\n                else if (op === '%')\r\n                {\r\n                    result = result % parseFloat(element)\r\n                }\r\n            }\r\n            else\r\n            {\r\n                op = element\r\n            }\r\n        } \r\n       return result\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n        return (\r\n            \r\n            <div className=\"container\">\r\n                <div className=\"card\">\r\n                    <h1 className=\"card-header\">Calculator</h1>\r\n                    <div className=\"screen\">\r\n                        <p className=\"card-title\">{this.historyRecord()}</p>\r\n                        <h2 className=\"card-title\">{(this.state.operation === '=') ? this.state.result : this.state.number}</h2>\r\n                    </div>\r\n                </div>\r\n                <table className=\"table\">\r\n                        <tbody>\r\n                            <tr>\r\n                            <td style={{backgroundColor: \"#f5f5f5\", color: \"darkgray\"}} onClick={() => this.clickedButton('C')}>C</td>\r\n                            <td style={{backgroundColor: \"#f5f5f5\", color: \"darkgray\"}} onClick={() => this.clickedButton('m')}>+/-</td>\r\n                            <td style={{backgroundColor: \"#f5f5f5\", color: \"darkgray\"}} onClick={() => this.clickedButton('%')}>%</td>\r\n                            <td style={{backgroundColor: \"#3c4b5e\", color: \"white\"}} onClick={() => this.clickedButton('/')}>÷</td>\r\n                            </tr>\r\n                            <tr>\r\n                            <td style={{color: \"darkgray\"}} onClick={() => this.clickedButton(7)}>7</td>\r\n                            <td style={{color: \"darkgray\"}} onClick={() => this.clickedButton(8)}>8</td>\r\n                            <td style={{color: \"darkgray\"}} onClick={() => this.clickedButton(9)}>9</td>\r\n                            <td style={{backgroundColor: \"#3c4b5e\", color: \"white\"}} onClick={() => this.clickedButton('*')}>X</td>\r\n                            </tr>\r\n                            <tr>\r\n                            <td style={{color: \"darkgray\"}} onClick={() => this.clickedButton(4)}>4</td>\r\n                            <td style={{color: \"darkgray\"}} onClick={() => this.clickedButton(5)}>5</td>\r\n                            <td style={{color: \"darkgray\"}} onClick={() => this.clickedButton(6)}>6</td>\r\n                            <td style={{backgroundColor: \"#3c4b5e\", color: \"white\"}} onClick={() => this.clickedButton('-')}>-</td>\r\n                            </tr>\r\n                            <tr>\r\n                            <td style={{color: \"darkgray\"}} onClick={() => this.clickedButton(1)}>1</td>\r\n                            <td style={{color: \"darkgray\"}} onClick={() => this.clickedButton(2)}>2</td>\r\n                            <td style={{color: \"darkgray\"}} onClick={() => this.clickedButton(3)}>3</td>\r\n                            <td style={{backgroundColor: \"#3c4b5e\", color: \"white\"}} onClick={() => this.clickedButton('+')}>+</td>\r\n                            </tr>\r\n                            <tr>\r\n                            <td style={{color: \"darkgray\"}} onClick={() => this.clickedButton(0)}>0</td>\r\n                            <td></td>\r\n                            <td style={{color: \"darkgray\"}}  onClick={() => this.clickedButton('.')}>.</td>\r\n                            <td style={{backgroundColor: \"#e7c313\", color: \"white\"}}onClick={() => this.clickedButton('=')}>=</td>\r\n                            </tr>\r\n                        </tbody>\r\n                        </table>\r\n                </div>                 \r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Structure;\r\n","import React from 'react';\r\nimport Structure from './structure'\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Structure />\r\n                  \r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app';\r\n\r\nReactDOM.render( <App />, document.querySelector('#root'));"],"sourceRoot":""}